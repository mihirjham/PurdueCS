Terminals which are not used

   ID


Grammar

    0 $accept: program $end

    1 program: program expr '\n'
    2        | /* empty */

    3 expr: expr '+' term
    4     | expr '-' term
    5     | term

    6 term: factor
    7     | term '*' factor
    8     | term '/' factor

    9 factor: '(' expr ')'
   10       | INT


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1
'(' (40) 9
')' (41) 9
'*' (42) 7
'+' (43) 3
'-' (45) 4
'/' (47) 8
error (256)
ID (258)
INT (259) 10


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
program (13)
    on left: 1 2, on right: 0 1
expr (14)
    on left: 3 4 5, on right: 1 3 4 9
term (15)
    on left: 6 7 8, on right: 3 4 5 7 8
factor (16)
    on left: 9 10, on right: 6 7 8


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    1 program: program . expr '\n'

    $end  shift, and go to state 2
    INT   shift, and go to state 3
    '('   shift, and go to state 4

    expr    go to state 5
    term    go to state 6
    factor  go to state 7


state 2

    0 $accept: program $end .

    $default  accept


state 3

   10 factor: INT .

    $default  reduce using rule 10 (factor)


state 4

    9 factor: '(' . expr ')'

    INT  shift, and go to state 3
    '('  shift, and go to state 4

    expr    go to state 8
    term    go to state 6
    factor  go to state 7


state 5

    1 program: program expr . '\n'
    3 expr: expr . '+' term
    4     | expr . '-' term

    '\n'  shift, and go to state 9
    '+'   shift, and go to state 10
    '-'   shift, and go to state 11


state 6

    5 expr: term .
    7 term: term . '*' factor
    8     | term . '/' factor

    '*'  shift, and go to state 12
    '/'  shift, and go to state 13

    $default  reduce using rule 5 (expr)


state 7

    6 term: factor .

    $default  reduce using rule 6 (term)


state 8

    3 expr: expr . '+' term
    4     | expr . '-' term
    9 factor: '(' expr . ')'

    '+'  shift, and go to state 10
    '-'  shift, and go to state 11
    ')'  shift, and go to state 14


state 9

    1 program: program expr '\n' .

    $default  reduce using rule 1 (program)


state 10

    3 expr: expr '+' . term

    INT  shift, and go to state 3
    '('  shift, and go to state 4

    term    go to state 15
    factor  go to state 7


state 11

    4 expr: expr '-' . term

    INT  shift, and go to state 3
    '('  shift, and go to state 4

    term    go to state 16
    factor  go to state 7


state 12

    7 term: term '*' . factor

    INT  shift, and go to state 3
    '('  shift, and go to state 4

    factor  go to state 17


state 13

    8 term: term '/' . factor

    INT  shift, and go to state 3
    '('  shift, and go to state 4

    factor  go to state 18


state 14

    9 factor: '(' expr ')' .

    $default  reduce using rule 9 (factor)


state 15

    3 expr: expr '+' term .
    7 term: term . '*' factor
    8     | term . '/' factor

    '*'  shift, and go to state 12
    '/'  shift, and go to state 13

    $default  reduce using rule 3 (expr)


state 16

    4 expr: expr '-' term .
    7 term: term . '*' factor
    8     | term . '/' factor

    '*'  shift, and go to state 12
    '/'  shift, and go to state 13

    $default  reduce using rule 4 (expr)


state 17

    7 term: term '*' factor .

    $default  reduce using rule 7 (term)


state 18

    8 term: term '/' factor .

    $default  reduce using rule 8 (term)
